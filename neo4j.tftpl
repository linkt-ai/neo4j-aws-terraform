#!/bin/bash -x

## 0 - Wait 10 seconds before starting script execution
sleep 10

#ONLY USED FOR TESTING
#OVERRIDE_VERSION=5.2.0

## 1 - Variable Setting and Test
NEO4J_PASSWORD=${neo4j_password}

# --- STEP 1: Install JDK ---
# Update packages
sudo apt-get update

# Download JDK 21 instead of 23
wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb

# Run the installer
sudo dpkg -i jdk-21_linux-x64_bin.deb

# --- STEP 2: Install Neo4j ---

# Add the Neo4j repository
wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/neotechnology.gpg -y
echo 'deb [signed-by=/etc/apt/keyrings/neotechnology.gpg] https://debian.neo4j.com stable latest' | sudo tee -a /etc/apt/sources.list.d/neo4j.list
sudo apt-get update -y

# Install Neo4j
sudo apt-get install neo4j=1:2025.02.0 -y

# --- STEP 3: Configure Neo4j to listen on all interfaces ---
# Set Neo4j to listen on all network interfaces
sudo sed -i 's/#server.default_listen_address=0.0.0.0/server.default_listen_address=0.0.0.0/' /etc/neo4j/neo4j.conf

# Configure specific connectors if needed
sudo sed -i 's/#server.bolt.listen_address=:7687/server.bolt.listen_address=0.0.0.0:7687/' /etc/neo4j/neo4j.conf
sudo sed -i 's/#server.http.listen_address=:7474/server.http.listen_address=0.0.0.0:7474/' /etc/neo4j/neo4j.conf

# Set the password for the database
sudo neo4j-admin dbms set-initial-password $NEO4J_PASSWORD

# Restart Neo4j to apply changes
sudo systemctl enable neo4j
sudo systemctl restart neo4j


# function aws_get_private_ips {
#   aws ec2 describe-instances\
#         --output=text\
#         --region=$TARGET_REGION\
#         --filters Name=tag:Terraform,Values=true\
#         --filters Name=tag:Name,Values=$INSTANCE_NAME\
#         --query "Reservations[].Instances[].PrivateIpAddress"
# }

# PRIVATE_IPS=$(aws_get_private_ips)

# for ip in $PRIVATE_IPS ; do
#   private_ip_array+=("$ip:5000,")
# done

# CORE_MEMBERS=$(echo $${private_ip_array[@]} | sed 's/,$//' | sed 's/ //g')

# function existing_version_tag {
#   aws elbv2 describe-tags\
#     --resource-arns $LB_ARN\
#     --region=$TARGET_REGION\
#     --query 'TagDescriptions[*].Tags[?Key==`Neo4j_Built_Version`].Value'\
#     --output=text
# }

# EXISTING_VERSION_TAG="$(existing_version_tag)"

# ## 2 - Install Neo4j using yum
# echo " - [ Installing Graph Database ] - "
# export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes

# if [[ ! -z $OVERRIDE_VERSION && $OVERRIDE_VERSION =~ ^[0-9]\.[0-9]\.[0-9]$ ]]; then
#   echo " - [ Installing OVERRIDE_VERSION: $OVERRIDE_VERSION ] - "
#   sudo yum install -y neo4j-enterprise-$OVERRIDE_VERSION
#   sleep 1
#   aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(sudo /usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
# elif [[ $EXISTING_VERSION_TAG =~ ^[0-9]\.[0-9]\.[0-9]$ ]]; then
#   echo " - [ Existing version tag already exists, building with version $EXISTING_VERSION_TAG to preserve cluster version ] - "
#   sudo yum install -y neo4j-enterprise-$EXISTING_VERSION_TAG

# else  
#   echo "No valid existing version set - assuming initial deployment"
#   PACKAGE_VERSION=$(curl --fail http://versions.neo4j-templates.com/target.json | jq -r ".aws[\"$NEO4J_VERSION\"]" || echo "")
#   if [[ ! -z $PACKAGE_VERSION && $PACKAGE_VERSION != "null" ]]; then
#     echo " - [ Found PACKAGE_VERSION from http://versions.neo4j-templates.com : PACKAGE_VERSION=$PACKAGE_VERSION ] - "
#     sudo yum install -y neo4j-enterprise-$PACKAGE_VERSION
#     sleep 1
#     aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(sudo /usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
#   else
#     echo '- [ Failed to resolve Neo4j version from http://versions.neo4j-templates.com, using PACKAGE_VERSION=latest ] - '
#     sudo yum install -y "neo4j-enterprise"
#     aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(sudo /usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
#   fi
# fi

# sudo systemctl enable neo4j
# if [[ "$PACKAGE_VERSION" == "latest" ]]; then
#   PACKAGE_VERSION=$(sudo /usr/share/neo4j/bin/neo4j --version)
# fi

# ## 3 - Extension Config
# echo " - [ Configuring extensions and security in neo4j.conf ] - "
# sudo sed -i s~#server.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~server.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf
# sudo sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf
# echo "dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*" | sudo tee -a /etc/neo4j/neo4j.conf

# ## 4 - Neo4j Main Configuration
# echo " - [ Neo4j Main (Network & Cluster Configuration ] - "
# THIS_PRIVATE_IP="$(hostname -i | awk '{print $NF}')"
# sudo sed -i s/#server.default_listen_address=0.0.0.0/server.default_listen_address=0.0.0.0/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.default_advertised_address=localhost/server.default_advertised_address="$LB_FQDN"/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.discovery.advertised_address=:5000/server.discovery.advertised_address="$THIS_PRIVATE_IP":5000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.cluster.advertised_address=:6000/server.cluster.advertised_address="$THIS_PRIVATE_IP":6000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.cluster.raft.advertised_address=:7000/server.cluster.raft.advertised_address="$THIS_PRIVATE_IP":7000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.routing.advertised_address=:7688/server.routing.advertised_address="$THIS_PRIVATE_IP":7688/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.discovery.listen_address=:5000/server.discovery.listen_address="$THIS_PRIVATE_IP":5000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.routing.listen_address=0.0.0.0:7688/server.routing.listen_address="$THIS_PRIVATE_IP":7688/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.cluster.listen_address=:6000/server.cluster.listen_address="$THIS_PRIVATE_IP":6000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.cluster.raft.listen_address=:7000/server.cluster.raft.listen_address="$THIS_PRIVATE_IP":7000/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.bolt.listen_address=:7687/server.bolt.listen_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
# sudo sed -i s/#server.bolt.advertised_address=:7687/server.bolt.advertised_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
# sudo neo4j-admin server memory-recommendation | sudo tee -a /etc/neo4j/neo4j.conf
# echo "server.metrics.enabled=true" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "server.metrics.jmx.enabled=true" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "server.metrics.prefix=neo4j" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "server.metrics.filter=*" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "server.metrics.csv.interval=5s" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "dbms.routing.default_router=SERVER" | sudo tee -a /etc/neo4j/neo4j.conf
# if [[ $NODE_COUNT == 1 ]]; then
#   echo "- [ Running on a single node ] -"
# else
#   echo " - [ Running on multiple nodes.  Configuring membership in neo4j.conf ] - "
#   sudo sed -i s/#initial.dbms.default_primaries_count=1/initial.dbms.default_primaries_count=3/g /etc/neo4j/neo4j.conf
#   sudo sed -i s/#initial.dbms.default_secondaries_count=0/initial.dbms.default_secondaries_count=$(expr $NODE_COUNT - 3)/g /etc/neo4j/neo4j.conf
#   sudo sed -i s/#server.bolt.listen_address=:7687/server.bolt.listen_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
#   echo "dbms.cluster.minimum_initial_system_primaries_count=$NODE_COUNT" | sudo tee -a /etc/neo4j/neo4j.conf
#   sudo sed -i s/#dbms.cluster.discovery.endpoints=localhost:5000,localhost:5001,localhost:5002/dbms.cluster.discovery.endpoints=$CORE_MEMBERS/g /etc/neo4j/neo4j.conf
# fi

# ## 5 - Install APOC
# if [[ "$INSTALL_APOC" == true ]]; then
#   echo " - [ Installing APOC library ] - "
#   sudo cp /var/lib/neo4j/products/apoc-*-core.jar /var/lib/neo4j/plugins/
#   if [[ $NODE_COUNT == 1 ]]; then
#     # For single instance deployments, install the full APOC library
#     sudo cp /var/lib/neo4j/products/apoc-*.jar /var/lib/neo4j/plugins/
#   fi
# fi

# ## 6 - Install Graph Data Science
# if [[ "$INSTALL_GDS" == true && $NODE_COUNT == 1 ]]; then
#   echo " - [  Installing Graph Data Science] - "
#   sudo cp /var/lib/neo4j/products/neo4j-graph-data-science-*.jar /var/lib/neo4j/plugins
# fi
# if [[ $GDS_KEY != None ]]; then
#   echo " - [ Writing GDS license key ] - "
#   sudo mkdir -p /etc/neo4j/licenses
#   echo "$GDS_KEY" | sudo tee /etc/neo4j/licenses/neo4j-gds.license
#   echo "gds.enterprise.license_file=/etc/neo4j/licenses/neo4j-gds.license" | sudo tee -a /etc/neo4j/neo4j.conf
# fi

# ## 7 - Install Bloom
# if [[ $INSTALL_BLOOM == true ]]; then
#   echo " - [ Installing Bloom ] - "
#   sudo cp /var/lib/neo4j/products/bloom-plugin-*.jar /var/lib/neo4j/plugins
# fi
# if [[ $BLOOM_KEY != None ]]; then
#   echo " - [ Writing Bloom license key ] - "
#   sudo mkdir -p /etc/neo4j/licenses
#   echo "$BLOOM_KEY" | sudo tee /etc/neo4j/licenses/neo4j-bloom.license
#   echo "dbms.bloom.license_file=/etc/neo4j/licenses/neo4j-bloom.license" | sudo tee -a /etc/neo4j/neo4j.conf
# fi

# ## 8 - Additional Configuration
# # Set up transaction logs cleanup policy
# echo "server.databases.transaction.logs.rotation.retention_policy=keep_none" | sudo tee -a /etc/neo4j/neo4j.conf

# # Performance optimizations
# echo "dbms.memory.pagecache.flush.buffer.enabled=true" | sudo tee -a /etc/neo4j/neo4j.conf
# echo "dbms.security.allow_csv_import_from_file_urls=true" | sudo tee -a /etc/neo4j/neo4j.conf

# ## 9 - Start Neo4j
# echo " - [ Starting Neo4j ] - "
# sudo service neo4j start
# sudo neo4j-admin dbms set-initial-password "$NEO4J_PASSWORD"

# # Log completion
# echo " - [ Neo4j deployment completed successfully ] - "